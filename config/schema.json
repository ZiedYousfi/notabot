{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Enigo Wrapper Configuration",
  "description": "Configuration schema for Notabot",
  "type": "object",
  "properties": {
    "sources": {
      "description": "Event sources configuration",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "file"
              },
              "path": {
                "type": "string",
                "description": "Path to the event file"
              }
            },
            "required": ["type", "path"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "directory"
              },
              "path": {
                "type": "string",
                "description": "Path to the events directory"
              },
              "pattern": {
                "type": "string",
                "description": "Optional file name pattern to match"
              }
            },
            "required": ["type", "path"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "tcp"
              },
              "address": {
                "type": "string",
                "description": "TCP address to listen on"
              }
            },
            "required": ["type", "address"]
          }
        ]
      },
      "minItems": 1
    },
    "actions": {
      "description": "Reusable action definitions",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/actionDef"
      }
    },
    "workflows": {
      "description": "Workflow definitions",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/actionDef"
        }
      }
    },
    "events": {
      "description": "Event to workflow mappings",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "workflow": {
            "type": "string",
            "description": "Name of the workflow to execute"
          },
          "vars_map": {
            "type": "object",
            "description": "Mapping from workflow variables to event fields",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["workflow"]
      }
    },
    "globals": {
      "description": "Global variables",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    }
  },
  "required": ["sources", "actions", "workflows", "events"],
  "definitions": {
    "actionDef": {
      "oneOf": [
        {
          "$ref": "#/definitions/action"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/actionDef"
          }
        },
        {
          "type": "string",
          "description": "Reference to a named action"
        }
      ]
    },
    "action": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "mouse_move",
            "mouse_click",
            "key_seq",
            "type_text",
            "sleep_ms",
            "sleep_rand_ms",
            "focus_window",
            "set_var",
            "log",
            "conditional",
            "ocr_check",
            "capture_screen"
          ]
        }
      },
      "required": ["type"],
      "allOf": [
        {
          "if": {
            "properties": {
              "type": { "const": "mouse_move" }
            }
          },
          "then": {
            "properties": {
              "x": { "type": "integer" },
              "y": { "type": "integer" }
            },
            "required": ["x", "y"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "mouse_click" }
            }
          },
          "then": {
            "properties": {
              "button": {
                "type": "string",
                "enum": ["left", "right", "middle"]
              }
            },
            "required": ["button"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "key_seq" }
            }
          },
          "then": {
            "properties": {
              "text": { "type": "string" }
            },
            "required": ["text"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "type_text" }
            }
          },
          "then": {
            "properties": {
              "text": { "type": "string" }
            },
            "required": ["text"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "sleep_ms" }
            }
          },
          "then": {
            "properties": {
              "ms": { "type": "integer", "minimum": 0 }
            },
            "required": ["ms"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "sleep_rand_ms" }
            }
          },
          "then": {
            "properties": {
              "min": { "type": "integer", "minimum": 0 },
              "max": { "type": "integer", "minimum": 0 }
            },
            "required": ["min", "max"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "focus_window" }
            }
          },
          "then": {
            "properties": {
              "title_contains": { "type": "string" }
            },
            "required": ["title_contains"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "set_var" }
            }
          },
          "then": {
            "properties": {
              "name": { "type": "string" },
              "value": { "type": "string" }
            },
            "required": ["name", "value"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "log" }
            }
          },
          "then": {
            "properties": {
              "level": {
                "type": "string",
                "enum": ["trace", "debug", "info", "warn", "error"]
              },
              "message": { "type": "string" }
            },
            "required": ["level", "message"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "conditional" }
            }
          },
          "then": {
            "properties": {
              "when": { "type": "string" },
              "equals": { "type": "string" },
              "then": { "$ref": "#/definitions/actionDef" },
              "else": { "$ref": "#/definitions/actionDef" }
            },
            "required": ["when", "equals", "then"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "ocr_check" }
            }
          },
          "then": {
            "properties": {
              "region": {
                "type": "array",
                "items": { "type": "integer", "minimum": 0 },
                "minItems": 4,
                "maxItems": 4
              },
              "must_contain": { "type": "string" }
            },
            "required": ["region", "must_contain"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "capture_screen" }
            }
          },
          "then": {
            "properties": {
              "path": { "type": "string" },
              "region": {
                "type": "array",
                "items": { "type": "integer", "minimum": 0 },
                "minItems": 4,
                "maxItems": 4
              }
            },
            "required": ["path"]
          }
        }
      ]
    }
  }
}
